**什么是IoC（控制反转）？**

IoC（Inversion of Control，控制反转）是一种重要的软件设计原则，广泛应用于现代软件开发中，尤其是在面向对象编程和依赖管理领域。它的核心思想是将程序中对象的创建、管理和依赖关系的控制权从代码本身转移到外部容器或框架中，从而实现解耦和更高的灵活性。

在传统的编程模式中，对象通常需要主动创建其依赖的对象，并直接管理这些依赖的生命周期。这种方式会导致代码高度耦合，难以维护和扩展。而通过IoC，对象不再负责创建或查找其依赖，而是被动地接收这些依赖，由外部容器负责注入所需的资源。这种依赖注入（Dependency Injection, DI）是IoC的一种常见实现方式。

IoC的主要优势包括：
1. **降低耦合度**：对象之间不再直接依赖，而是通过接口或抽象进行交互，提升了代码的可维护性。
2. **增强可测试性**：依赖可以通过模拟（Mock）对象注入，方便单元测试。
3. **提高灵活性**：通过配置文件或注解动态调整依赖关系，无需修改代码即可实现功能扩展。
4. **简化复杂系统管理**：大型项目中，IoC容器可以集中管理对象的创建和生命周期，减少重复代码。

IoC的经典应用场景包括Spring框架中的依赖注入、事件驱动架构中的回调机制等。它不仅是一种技术实现，更是一种设计哲学，帮助开发者构建更加模块化、可扩展和易于维护的软件系统。